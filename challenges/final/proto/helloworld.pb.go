// Code generated by protoc-gen-go. DO NOT EDIT.
// source: helloworld.proto

package helloworld

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Image struct {
	Workload             string   `protobuf:"bytes,1,opt,name=workload,proto3" json:"workload,omitempty"`
	Index                int64    `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Filepath             string   `protobuf:"bytes,3,opt,name=filepath,proto3" json:"filepath,omitempty"`
	Filter               string   `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Image) Reset()         { *m = Image{} }
func (m *Image) String() string { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()    {}
func (*Image) Descriptor() ([]byte, []int) {
	return fileDescriptor_17b8c58d586b62f2, []int{0}
}

func (m *Image) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Image.Unmarshal(m, b)
}
func (m *Image) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Image.Marshal(b, m, deterministic)
}
func (m *Image) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Image.Merge(m, src)
}
func (m *Image) XXX_Size() int {
	return xxx_messageInfo_Image.Size(m)
}
func (m *Image) XXX_DiscardUnknown() {
	xxx_messageInfo_Image.DiscardUnknown(m)
}

var xxx_messageInfo_Image proto.InternalMessageInfo

func (m *Image) GetWorkload() string {
	if m != nil {
		return m.Workload
	}
	return ""
}

func (m *Image) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Image) GetFilepath() string {
	if m != nil {
		return m.Filepath
	}
	return ""
}

func (m *Image) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

// The request message containing the user's name.
type TestRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestRequest) Reset()         { *m = TestRequest{} }
func (m *TestRequest) String() string { return proto.CompactTextString(m) }
func (*TestRequest) ProtoMessage()    {}
func (*TestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_17b8c58d586b62f2, []int{1}
}

func (m *TestRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestRequest.Unmarshal(m, b)
}
func (m *TestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestRequest.Marshal(b, m, deterministic)
}
func (m *TestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestRequest.Merge(m, src)
}
func (m *TestRequest) XXX_Size() int {
	return xxx_messageInfo_TestRequest.Size(m)
}
func (m *TestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TestRequest proto.InternalMessageInfo

func (m *TestRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The response message containing the greetings
type TestReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestReply) Reset()         { *m = TestReply{} }
func (m *TestReply) String() string { return proto.CompactTextString(m) }
func (*TestReply) ProtoMessage()    {}
func (*TestReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_17b8c58d586b62f2, []int{2}
}

func (m *TestReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestReply.Unmarshal(m, b)
}
func (m *TestReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestReply.Marshal(b, m, deterministic)
}
func (m *TestReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestReply.Merge(m, src)
}
func (m *TestReply) XXX_Size() int {
	return xxx_messageInfo_TestReply.Size(m)
}
func (m *TestReply) XXX_DiscardUnknown() {
	xxx_messageInfo_TestReply.DiscardUnknown(m)
}

var xxx_messageInfo_TestReply proto.InternalMessageInfo

func (m *TestReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// The request message containing the user's name.
type ImgRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Img                  *Image   `protobuf:"bytes,2,opt,name=img,proto3" json:"img,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImgRequest) Reset()         { *m = ImgRequest{} }
func (m *ImgRequest) String() string { return proto.CompactTextString(m) }
func (*ImgRequest) ProtoMessage()    {}
func (*ImgRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_17b8c58d586b62f2, []int{3}
}

func (m *ImgRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImgRequest.Unmarshal(m, b)
}
func (m *ImgRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImgRequest.Marshal(b, m, deterministic)
}
func (m *ImgRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImgRequest.Merge(m, src)
}
func (m *ImgRequest) XXX_Size() int {
	return xxx_messageInfo_ImgRequest.Size(m)
}
func (m *ImgRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ImgRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ImgRequest proto.InternalMessageInfo

func (m *ImgRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ImgRequest) GetImg() *Image {
	if m != nil {
		return m.Img
	}
	return nil
}

// The response message containing the greetings
type ImgReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImgReply) Reset()         { *m = ImgReply{} }
func (m *ImgReply) String() string { return proto.CompactTextString(m) }
func (*ImgReply) ProtoMessage()    {}
func (*ImgReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_17b8c58d586b62f2, []int{4}
}

func (m *ImgReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImgReply.Unmarshal(m, b)
}
func (m *ImgReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImgReply.Marshal(b, m, deterministic)
}
func (m *ImgReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImgReply.Merge(m, src)
}
func (m *ImgReply) XXX_Size() int {
	return xxx_messageInfo_ImgReply.Size(m)
}
func (m *ImgReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ImgReply.DiscardUnknown(m)
}

var xxx_messageInfo_ImgReply proto.InternalMessageInfo

func (m *ImgReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Image)(nil), "helloworld.Image")
	proto.RegisterType((*TestRequest)(nil), "helloworld.TestRequest")
	proto.RegisterType((*TestReply)(nil), "helloworld.TestReply")
	proto.RegisterType((*ImgRequest)(nil), "helloworld.ImgRequest")
	proto.RegisterType((*ImgReply)(nil), "helloworld.ImgReply")
}

func init() {
	proto.RegisterFile("helloworld.proto", fileDescriptor_17b8c58d586b62f2)
}

var fileDescriptor_17b8c58d586b62f2 = []byte{
	// 299 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x51, 0xcd, 0x4f, 0xfa, 0x40,
	0x10, 0xfd, 0xf5, 0xc7, 0x87, 0x30, 0x1c, 0xd4, 0x09, 0x62, 0x83, 0x17, 0x5c, 0x35, 0xe1, 0xd4,
	0x18, 0x3c, 0xea, 0x89, 0x44, 0x63, 0x6f, 0xa4, 0x92, 0x78, 0x5e, 0xed, 0xb0, 0x34, 0xec, 0xb2,
	0x6b, 0xb7, 0x06, 0x7a, 0xf4, 0x3f, 0x37, 0xdd, 0x52, 0xad, 0x21, 0xe1, 0x36, 0x6f, 0x3e, 0xde,
	0xbc, 0x37, 0x03, 0x27, 0x4b, 0x92, 0x52, 0x6f, 0x74, 0x2a, 0xe3, 0xc0, 0xa4, 0x3a, 0xd3, 0x08,
	0xbf, 0x19, 0xa6, 0xa0, 0x15, 0x2a, 0x2e, 0x08, 0x87, 0xd0, 0xd9, 0xe8, 0x74, 0x25, 0x35, 0x8f,
	0x7d, 0x6f, 0xe4, 0x8d, 0xbb, 0xd1, 0x0f, 0xc6, 0x3e, 0xb4, 0x92, 0x75, 0x4c, 0x5b, 0xff, 0xff,
	0xc8, 0x1b, 0x37, 0xa2, 0x12, 0x14, 0x13, 0x8b, 0x44, 0x92, 0xe1, 0xd9, 0xd2, 0x6f, 0x94, 0x13,
	0x15, 0xc6, 0x01, 0xb4, 0x17, 0x89, 0xcc, 0x28, 0xf5, 0x9b, 0xae, 0xb2, 0x43, 0xec, 0x12, 0x7a,
	0x73, 0xb2, 0x59, 0x44, 0x1f, 0x9f, 0x64, 0x33, 0x44, 0x68, 0xae, 0xb9, 0xa2, 0xdd, 0x42, 0x17,
	0xb3, 0x1b, 0xe8, 0x96, 0x2d, 0x46, 0xe6, 0xe8, 0xc3, 0x91, 0x22, 0x6b, 0xb9, 0xa8, 0x7a, 0x2a,
	0xc8, 0x1e, 0x01, 0x42, 0x25, 0x0e, 0x10, 0xe1, 0x15, 0x34, 0x12, 0x25, 0x9c, 0xe6, 0xde, 0xe4,
	0x34, 0xa8, 0x9d, 0xc1, 0x39, 0x8e, 0x8a, 0x2a, 0xbb, 0x86, 0x8e, 0xa3, 0x39, 0xb8, 0x6c, 0xf2,
	0xe5, 0x41, 0x73, 0xce, 0xed, 0x0a, 0x1f, 0xa0, 0xf3, 0xc2, 0xf3, 0xe7, 0x82, 0x0a, 0xcf, 0xeb,
	0x94, 0x35, 0x57, 0xc3, 0xb3, 0xfd, 0x82, 0x91, 0x39, 0xfb, 0x87, 0xf7, 0xd0, 0x7d, 0x72, 0x77,
	0x08, 0x95, 0xc0, 0xc1, 0x5f, 0x45, 0x95, 0x95, 0x61, 0x7f, 0x2f, 0xef, 0x86, 0xa7, 0xb7, 0x70,
	0x91, 0xe8, 0x40, 0xa4, 0xe6, 0x3d, 0xa0, 0x2d, 0x57, 0x46, 0x92, 0xad, 0x75, 0x4e, 0x8f, 0x9d,
	0xa8, 0xd7, 0x22, 0x9e, 0x15, 0x5f, 0x9e, 0x79, 0x6f, 0x6d, 0xf7, 0xee, 0xbb, 0xef, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xdb, 0x37, 0x74, 0x0a, 0x02, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TaskClient is the client API for Task service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TaskClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestReply, error)
	FilterImg(ctx context.Context, in *ImgRequest, opts ...grpc.CallOption) (*ImgReply, error)
}

type taskClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskClient(cc grpc.ClientConnInterface) TaskClient {
	return &taskClient{cc}
}

func (c *taskClient) SayHello(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestReply, error) {
	out := new(TestReply)
	err := c.cc.Invoke(ctx, "/helloworld.Task/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) FilterImg(ctx context.Context, in *ImgRequest, opts ...grpc.CallOption) (*ImgReply, error) {
	out := new(ImgReply)
	err := c.cc.Invoke(ctx, "/helloworld.Task/FilterImg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServer is the server API for Task service.
type TaskServer interface {
	// Sends a greeting
	SayHello(context.Context, *TestRequest) (*TestReply, error)
	FilterImg(context.Context, *ImgRequest) (*ImgReply, error)
}

// UnimplementedTaskServer can be embedded to have forward compatible implementations.
type UnimplementedTaskServer struct {
}

func (*UnimplementedTaskServer) SayHello(ctx context.Context, req *TestRequest) (*TestReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (*UnimplementedTaskServer) FilterImg(ctx context.Context, req *ImgRequest) (*ImgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterImg not implemented")
}

func RegisterTaskServer(s *grpc.Server, srv TaskServer) {
	s.RegisterService(&_Task_serviceDesc, srv)
}

func _Task_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Task/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).SayHello(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_FilterImg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).FilterImg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Task/FilterImg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).FilterImg(ctx, req.(*ImgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Task_serviceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.Task",
	HandlerType: (*TaskServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Task_SayHello_Handler,
		},
		{
			MethodName: "FilterImg",
			Handler:    _Task_FilterImg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helloworld.proto",
}
